apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - image: rabbitmq:3.6.10
        name: rabbitmq
        ports:
        - containerPort: 5672
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  ports:
  - port: 5672
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scdf-server
  labels:
    app: scdf-server
data:
  application.yaml: |
    spring:
      cloud:
        dataflow:
          task:
            platform:
              kubernetes:
                accounts:
                  default:
                    limits:
                      memory: 1024Mi
      datasource:
        url: jdbc:mysql://${DB-DATAFLOW_SERVICE_HOST}:${DB-DATAFLOW_SERVICE_PORT}/db-dataflow
        username: root
        password: ${mysql-root-password}
        driverClassName: org.mariadb.jdbc.Driver
        testOnBorrow: true
        validationQuery: SELECT 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scdf-server
  labels:
    app: scdf-server
spec:
  selector:
    matchLabels:
      app: scdf-server
  replicas: 1
  template:
    metadata:
      labels:
        app: scdf-server
    spec:
      containers:
      - name: scdf-server
        image: springcloud/spring-cloud-dataflow-server:2.8.1
        imagePullPolicy: Always
        volumeMounts:
        - name: config
          mountPath: /workspace/config
          readOnly: true
        - name: database
          mountPath: /etc/secrets/database
          readOnly: true
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /management/health
            port: 9393
          initialDelaySeconds: 45
        readinessProbe:
          httpGet:
            path: /management/info
            port: 9393
          initialDelaySeconds: 45
        resources:
          limits:
            cpu: 1
            memory: 2048Mi
          requests:
            cpu: 0.5
            memory: 1024Mi
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SPRING_CLOUD_CONFIG_ENABLED
          value: "false"
        - name: SPRING_CLOUD_DATAFLOW_FEATURES_ANALYTICS_ENABLED
          value: "true"
        - name: SPRING_CLOUD_DATAFLOW_FEATURES_SCHEDULES_ENABLED
          value: "true"
        - name: SPRING_CLOUD_DATAFLOW_TASK_COMPOSEDTASKRUNNER_URI
          value: docker://springcloud/spring-cloud-dataflow-composed-task-runner:2.8.1
        - name: SPRING_CLOUD_KUBERNETES_CONFIG_ENABLE_API
          value: "false"
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_ENABLE_API
          value: "false"
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_PATHS
          value: /etc/secrets
        - name: SPRING_CLOUD_DATAFLOW_SERVER_URI
          value: http://${SCDF_SERVER_SERVICE_HOST}:${SCDF_SERVER_SERVICE_PORT}
        - name: SPRING_CLOUD_SKIPPER_CLIENT_SERVER_URI
          value: http://${SKIPPER_SERVICE_HOST}:${SKIPPER_SERVICE_PORT}/api
        - name: SPRING_APPLICATION_JSON
          value: '{ "maven": { "local-repository": null, "remote-repositories": { "repo1": { "url": "https://repo.spring.io/libs-snapshot"} } } }'
      serviceAccountName: scdf-sa
      volumes:
      - name: config
        configMap:
          name: scdf-server
          items:
          - key: application.yaml
            path: application.yaml
      - name: database
        secret:
          secretName: db-dataflow
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: scdf-rb
subjects:
- kind: ServiceAccount
  name: scdf-sa
roleRef:
  kind: Role
  name: scdf-role
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: scdf-role
rules:
- apiGroups:
  - ""
  resources:
  - services
  - pods
  - replicationcontrollers
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
  - patch
- apiGroups:
  - extensions
  resources:
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
  - patch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scdf-sa
---
kind: Service
apiVersion: v1
metadata:
  name: scdf-server
  labels:
    app: scdf-server
    spring-deployment-id: scdf
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 9393
    name: scdf-server
  selector:
    app: scdf-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-dataflow
  labels:
    app: db-dataflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-dataflow
  template:
    metadata:
      labels:
        app: db-dataflow
    spec:
      containers:
      - image: mysql:5.7.25
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-root-password
              name: db-dataflow
        - name: MYSQL_DATABASE
          value: db-dataflow
        ports:
        - containerPort: 3306
          name: db-dataflow
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        args:
        - --ignore-db-dir=lost+found
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: db-dataflow
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-dataflow
  labels:
    app: db-dataflow
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: db-dataflow
  labels:
    app: db-dataflow
data:
  mysql-root-password: eW91cnBhc3N3b3Jk
  mysql-root-username: cm9vdA==
---
apiVersion: v1
kind: Service
metadata:
  name: db-dataflow
  labels:
    app: db-dataflow
spec:
  ports:
  - port: 3306
  selector:
    app: db-dataflow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-skipper
  labels:
    app: db-skipper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-skipper
  template:
    metadata:
      labels:
        app: db-skipper
    spec:
      containers:
      - image: mysql:5.7.25
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-root-password
              name: db-skipper
        - name: MYSQL_DATABASE
          value: db-skipper
        ports:
        - containerPort: 3306
          name: db-skipper
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        args:
        - --ignore-db-dir=lost+found
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: db-skipper
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-skipper
  labels:
    app: db-skipper
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: db-skipper
  labels:
    app: db-skipper
data:
  mysql-root-password: eW91cnBhc3N3b3Jk
  mysql-root-username: cm9vdA==
---
apiVersion: v1
kind: Service
metadata:
  name: db-skipper
  labels:
    app: db-skipper
spec:
  ports:
  - port: 3306
  selector:
    app: db-skipper
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: skipper
  labels:
    app: skipper
data:
  application.yaml: |
    spring:
      cloud:
        skipper:
          server:
            platform:
              kubernetes:
                accounts:
                  default:
                    environmentVariables: SPRING_RABBITMQ_HOST=${RABBITMQ_SERVICE_HOST},SPRING_RABBITMQ_PORT=${RABBITMQ_SERVICE_PORT}
                    limits:
                      memory: 1024Mi
                      cpu: 500m
                    readinessProbeDelay: 120
                    livenessProbeDelay: 90
      datasource:
        url: jdbc:mysql://${DB-SKIPPER_SERVICE_HOST}:${DB-SKIPPER_SERVICE_PORT}/db-skipper
        username: root
        password: ${mysql-root-password}
        driverClassName: org.mariadb.jdbc.Driver
        testOnBorrow: true
        validationQuery: SELECT 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: skipper
  labels:
    app: skipper
spec:
  selector:
    matchLabels:
      app: skipper
  replicas: 1
  template:
    metadata:
      labels:
        app: skipper
    spec:
      containers:
      - name: skipper
        image: springcloud/spring-cloud-skipper-server:2.7.1
        imagePullPolicy: Always
        volumeMounts:
        - name: config
          mountPath: /workspace/config
          readOnly: true
        - name: database
          mountPath: /etc/secrets/database
          readOnly: true
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 7577
          initialDelaySeconds: 45
        readinessProbe:
          httpGet:
            path: /actuator/info
            port: 7577
          initialDelaySeconds: 45
        resources:
          limits:
            cpu: 1
            memory: 1024Mi
          requests:
            cpu: 0.5
            memory: 640Mi
        env:
        - name: SPRING_CLOUD_CONFIG_ENABLED
          value: "false"
        - name: SPRING_CLOUD_KUBERNETES_CONFIG_ENABLE_API
          value: "false"
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_ENABLE_API
          value: "false"
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_PATHS
          value: /etc/secrets
      serviceAccountName: scdf-sa
      volumes:
      - name: config
        configMap:
          name: skipper
          items:
          - key: application.yaml
            path: application.yaml
      - name: database
        secret:
          secretName: db-skipper
---
apiVersion: v1
kind: Service
metadata:
  name: skipper
  labels:
    app: skipper
    spring-deployment-id: scdf
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 7577
  selector:
    app: skipper
